require 'ipaddr'

class Test < Controller

  periodic_timer_event :send_message_flowstatsrequest, 7
  
  def start
    puts "trema test start"
    @dpid=[]
    @RootSwitch = 1
    @setdpid=[]
    @loadbarance = 2
    @targetip
    @srcip = "192.168.1.100"
    @dstip = "10.5.10.5"
  end

  def switch_ready datapath_id
    puts "switch ready  #{datapath_id.to_hex}"
    send_flow_mod_add( #ARP = FLOOD
                      datapath_id,
                      :match => Match.new( :dl_type => 0x0806 ),
                      :actions => SendOutPort.new( OFPP_FLOOD )
                      )
    @dpid.push(datapath_id)

    send_flow_mod_add(
                      datapath_id,
                      :match => Match.new( :dl_type => 0x0800 ,:nw_dst => "192.168.1.0/24"  ),
                      :actions => ActionOutput.new( :port => 1 )
                      )
    send_flow_mod_add(
                      datapath_id,
                      :match => Match.new( :dl_type => 0x0800 ,:nw_dst => "10.5.10.0/24"  ),
                      :actions => ActionOutput.new( :port => 2 )
                      )
  end


  def send_message_flowstatsrequest
    @dpid.each do |each|
      send_message(each, FlowStatsRequest.new(:match => Match.new()))
    end
  end

  def stats_reply dpid, message
    if message.type == Trema::StatsReply::OFPST_FLOW
      message.stats.each do |each|
        puts each.to_s
        if !each.match.nw_dst.to_s.eql?("0.0.0.0")
          split = each.match.to_s.split("nw_dst = ")
          nw_dst = split[1].split(",",2)
          range = IPAddr.new(nw_dst[0])
          if range.include?(IPAddr.new(@srcip))
            puts "hit"
            send_flow_mod_delete(
                                 dpid,
                                 :match => each.match
                                 )
            puts "hit delete: priority -1 add"
            send_flow_mod_add(
                              dpid,
                              :match => each.match,
                              :priority => each.priority - 1
                              )
            @setdpid.push(dpid)
          elsif
            puts "out range"
          end
          each.actions.each do |action|
            puts "    * #{action.to_s}"
          end
        end
      end
      #    puts message.stats
    end
  end

  def packet_in datapath_id, packet_in
    macsa = packet_in.macsa#source_mac_address
    macda = packet_in.macda#destination_mac_address
    ipsa = packet_in.ipv4_saddr#ipv4_source_address
    ipda = packet_in.ipv4_daddr#ipv4_destination_address
    
    
    if !ipsa.nil? && "0.0.0.0" != ipsa.to_s then
      puts "----------------------"
      puts "macsa : #{macsa}"
      puts "macda : #{macda}"
      puts "ipsa : #{ipsa.to_s}"
      puts "ipda : #{ipda.to_s}"
      puts "----------------------"
      
    end
  end
  
end
